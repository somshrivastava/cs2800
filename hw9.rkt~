#lang lsl


;; Problem 1

;; part p1a
(define-mutable-struct counter (val))
(define-contract (Counter X) (Struct counter [X]))

(: make-counter-1 (-> (-> Natural Natural)))
(define make-counter-1
  (let ([c (make-counter 0)])
    (lambda ()
      (lambda (inc)
        (begin
          (set-counter-val! c (+ inc (counter-val c)))
          (counter-val c))))))

(: make-counter-2 (-> (-> Natural Natural)))
(define make-counter-2
  (lambda ()
    (let ([c (make-counter 2)])
      (lambda (inc)
        (begin
          (set-counter-val! c (+ inc (counter-val c)))
          (counter-val c))))))
;; part p1a

;; part p1b
(: counter-distinguish (-> (-> (-> Natural Natural)) Natural))
(define (counter-distinguish make-counter)
  (let ([counter (make-counter)])
    (counter 0)))

(check-expect (not (equal? (counter-distinguish make-counter-1)
                           (counter-distinguish make-counter-2)))
              #t)


;; part p1b

;; Problem 2
;; part p2a
(: fast-incr (-> (Counter Natural) (Counter Natural) Natural))
(define (fast-incr c1 c2)
  (begin (set-counter-val! c1 (+ (counter-val c1) 1))
         (set-counter-val! c2 (+ (counter-val c2) 1))
         (+ (counter-val c1) (counter-val c2))))

;; part p2a

;; part p2b
(: fast-incr-prop (-> (Counter Natural) (Counter Natural) True))
(define (fast-incr-prop c1 c2)
  (equal? (+ (counter-val c1) (counter-val c2) 2)
          (fast-incr c1 c2)))
;; part p2b

;; part p2c
(: fast-incr-exercise (-> Natural))
(define (fast-incr-exercise)
  (let ([c (make-counter 0)])  ;; Create a single counter
    (fast-incr c c)))           ;; Pass the same counter twice

(check-expect (fast-incr-prop (make-counter 0) (make-counter 0)) #t)  ;; Passes
(check-expect (fast-incr-prop (let ([c (make-counter 0)]) c) 
                              (let ([c (make-counter 0)]) c)) #t)  ;; Passes
(check-expect (fast-incr-prop (let ([c (make-counter 0)]) c) 
                              (let ([c (make-counter 0)]) c)) #t)  ;; Fails

;; part p2c



;; Problem 3

;; part p3a
(: fast-incr-fixed 
   (Function (arguments (c1 (Counter Natural))
                        (c2 (AllOf (Counter Natural) (lambda (c) (not (eq? c c1))))))
             (result Natural)))
(define (fast-incr-fixed c1 c2)
  (begin (set-counter-val! c1 (+ (counter-val c1) 1))
         (set-counter-val! c2 (+ (counter-val c2) 1))
         (+ (counter-val c1) (counter-val c2))))

;; part p3a

;; Problem 4

(define-mutable-struct mcons (first rest))
(define-contract (Mcons X Y) (Struct mcons [X Y]))
(define-contract MList (OneOf empty? (Mcons Integer MList)))

(define-struct invalid-mlist ())

(: good-mlist (-> Any Boolean))
(define (good-mlist ml)
  (letrec ([loop (lambda (slow fast)
                   (cond
                     [(empty? fast) #t] ;; Reached end, it's a good list
                     [(not (mcons? fast)) #t] ;; End reached, still good
                     [(not (mcons? (mcons-rest fast))) #t] ;; No cycle
                     [(eq? slow fast) (raise (make-invalid-mlist))] ;; ðŸš¨ Cycle detected!
                     [else (loop (mcons-rest slow) (mcons-rest (mcons-rest fast)))]))]) ;; Move slow & fast
    (loop ml ml))) ;; Start with both pointers at the head


(: mlength (-> good-mlist Natural))
(define (mlength ml)
  (cond
    [(empty? ml) 0]
    [(mcons? ml) (add1 (mlength (mcons-rest ml)))]))